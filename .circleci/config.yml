version: 2.1

executors:
  golang:
    docker: 
      - image: circleci/golang

orbs:
  snyk: snyk/snyk@0.0.8

commands:
  build:
    steps:
      - run:
          name: Build
          command: go build
      - run:
          name: Lint
          command: |
            go get -u golang.org/x/lint/golint
            golint ./...
      - run:
          name: "Vet: report likely mistakes in packages"
          command: go vet ./...
      - run:
          name: Unit Test
          command: go test ./... -v
      - snyk/scan:
          organization: amirashad
      - run:
          name: Get version
          command: ./ghctl --version

jobs:
  validate:
    executor: golang
    steps:
      - checkout
      - build
  deploy:
    executor: golang
    steps:
      - checkout
      - run:
          name: Build for multiple architectures
          command: |
            GOOS=darwin  GOARCH=amd64               go build    -o artifacts/${CIRCLE_PROJECT_REPONAME}_darwin_amd64
            GOOS=linux   GOARCH=amd64               go build    -o artifacts/${CIRCLE_PROJECT_REPONAME}_linux_amd64
            GOOS=windows GOARCH=amd64               go build    -o artifacts/${CIRCLE_PROJECT_REPONAME}_windows_amd64.exe
            GOOS=linux   GOARCH=amd64 CGO_ENABLED=0 go build -a -o artifacts/${CIRCLE_PROJECT_REPONAME}_alpinelinux_amd64
      - setup_remote_docker
      - run: 
          name: Build yq for alpine image
          command: |
            git clone git@github.com:mikefarah/yq.git
            cd yq
            GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a
      - run: 
          name: Publish to DockerHub
          command: |
            cp artifacts/${CIRCLE_PROJECT_REPONAME}_alpinelinux_amd64 ./${CIRCLE_PROJECT_REPONAME}
            VERSION=$(./artifacts/${CIRCLE_PROJECT_REPONAME}_linux_amd64 --version)
            echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
            IMAGE_NAME=$DOCKER_USER/${CIRCLE_PROJECT_REPONAME}
            docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:$VERSION .
            docker push $IMAGE_NAME:$VERSION
            docker push $IMAGE_NAME:latest
      - run: 
          name: List artifacts
          command: ls -lah artifacts/
      - run:
          name: Publish Release on GitHub
          command: |
            go get github.com/tcnksm/ghr
            VERSION=v$(./artifacts/${CIRCLE_PROJECT_REPONAME}_linux_amd64 --version)
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -n ${VERSION} -delete ${VERSION} ./artifacts/

workflows:
  ghctl_workflow:
    jobs:
      - validate
      - deploy:
          requires:
            - validate
          filters:
            branches:
              only: master
